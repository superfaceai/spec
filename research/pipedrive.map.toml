#
# Map for profile
#
profile = 'http://supermodel.io/superface/CRM/Customers'

[traits.stream]
profile = 'http://supermodel.io/superface/superdriver/Page'

#
# Provider details
#
[provider]
id = 'http://superface.ai/directory/pipedrive'

#
# Affordance map
#
[[map.RetrieveCustomers.steps]]
when = 'since'
run = 'FindFilter'

  [map.RetrieveCustomers.steps.parameters]
  filterName = ':superface-filter'

  [map.RetrieveCustomers.steps.result]
  '$filterId' = '.filterId'

[[map.RetrieveCustomers.steps]]
when = 'since && !$filterId'  # AND(since, NOT($filterId)) - https://formulajs.info/functions/

  [map.RetrieveCustomers.steps.parameters]
  since = 'since' # resolves to -> http://supermodel.io/superface/CRM/Customers#/descriptors/RetrieveCustomers/descriptors/since

  [map.RetrieveCustomers.steps.result]
  '$filterId' = '.filterId'  
  
[[map.RetrieveCustomers.steps]]
run = 'RetrieveOrganizations'

  [map.RetrieveCustomers.steps.parameters]
  offset = 'stream:offset'
  limit = 'stream:limit'
  filterId = '$filterId'

  [map.RetrieveCustomers.steps.result]
  'customers' = '.customers'
  'customersCount' = '.count'

# 
# Operations
#

# Add filter
[ops.AddFilter]
parameters = [ 'since' ]

[ops.AddFilter.http]
method = 'POST'
href = '/filters'

  [ops.AddFilter.http.query.api_token]
  api_token = '$security.apikey'

  # Crazy pipedrive API madness
  # See https://pipedrive.readme.io/docs/adding-a-filter
  # This is actually not real pipedrive condition as that is very complex for this demo
  [ops.AddFilter.http.request.'application/json'.body]
  '.name' = ':a filter'       # hard-set value 'a filter'
  '.type' = ':organization'   # hard-set value 'organization'
  '.updatedAfter' = 'since'   # input step input parameter

  [ops.AddFilter.http.response.200.'application/json'.body]
  '.filterId' = '.id' # get the value of '.id' and store it in 'filterId' field


# RetrieveOrganizations
[ops.RetrieveOrganizations]
parameters = [ 'filterId', 'offset', 'limit' ]

[ops.RetrieveOrganizations.http]
method = 'GET'
href = '/organizations'

  # Query parameters
  [ops.RetrieveOrganizations.http.query]
  api_token = '$security.apikey'
  filter_id = 'filterId'
  start = 'offset'
  limit = 'limit'  

  [ops.RetrieveOrganizations.http.response.200.'application/json'.body]
  '.customers[].id' = '.data[].id'
  '.customers[].name' = '.data[].name'
  # '.customerCount' = '.data | COUNT'      # mixed formula.js and jq syntax
  '.count' = 'COUNT(.data)'       # formula.js syntax
  # '.customerCount' = '.data | length'   # jq syntax
  

  '.offset' = '.additional_data.pagination.next_start'
  '.hasMore' = '.additional_data.pagination.more_items_in_collection'


# Right-hand values starting with:
# `:`         - literal value, example: `:value`
# `.`         - jq expression, example: `.expression`
# `$`         - variable `$variable`
# no prefix   - relative or absolute URL of a descriptor `descriptor`

# consider
# `$$`        - for global variables
# `@`         - for descrioptor identifiers
#
# Slang
#
some thing {
  a = 4
}

some {
  thing {
    a = 4
  }
}

some {
  thing.a = 4 
}

some.thing.a = 4 

#
# Functions
#
# Use data and error after the return keyword
#

operation Foo {
  # fail instead of return, break this operation execution flow
  # the the error value is available in caller's `error` variable
  fail if (args.condition) {
    message = "I have failed!"
  }

  # successfully finish, break execution flow
  # the the return value is available in caller's `data` variable
  return data {
    message = "Hello World!"
  }
}

operation Bar {  
  call Foo (message = "Hello World!") {
    # operation call have `data` and `error` variables availabe
    # when `error` is set then the call Foo() ended with error
    return if (data && someCondition) {
      fieldName = data.value
    }

    return if (!error) {
      fieldName = 42
    }

    fail if (error) {
      errorFieldName = "It all failed"
    }
  }
}

#
#  HTTP
#
map GetGitHubGists {
  http GET "/gists" {
    request headers {
      accept = "application/vnd.github.v3+json"
    }

    response 200 "application/json" {
      map result {
        numberOfResults = body.length()                     # RHS is Jessie expression
        auhtors = call ProcessAuthors(auhtors = body)       # RHS is one operation call, the call MUST not result in error
      }
    }

    response 500 {
      map error {
        message = "No gist for you"
      } 
    }

  }
}

operation ProcessAuthors {
  # operation call have its arguments available under the `args` variable
  authors = args.authors.map((gist) => return gist.owner.login)
  return authors
}

operation ComplexObject {
  return {
    a = 1
    b.c = 2
    d.e.f = 42
  }
}

#
# Explicit map execution flow control with `return`
#
map UseCase {
  call OperationA { }

  call OperationB {
    map result {
      answer = data.answerFromOperationB
    }

    # if call OperationA ends with error the whole use case ends with error 
    # if call OperationA ends with success then the result has value from call OperationC
    return map error if (error) {
      message = error.message
    }
  }

  call OperationC {
    map result {
      answer = data.answerFromOperationC
    }
  }
}


#
# GraphQL â€“ WORK IN PROGRESS 
#

# https://gist.github.com/jamesluberda/d73376298e22e3fc4abbca590b97d5e0
map GetGitHubGistsGQL {
  gql """
query { 
  viewer { 
    gists (first: 100, orderBy: {field: CREATED_AT, direction: DESC} ) {
      edges {
        node {
          createdAt
          description
          name
          pushedAt
          stargazers (first: 100) {
            totalCount
            edges {
              node {
                id
              }
            }
          }
          updatedAt
        }
      }
    }
  }
}
""" 
  {
    map result {
      
    }
  }

}
